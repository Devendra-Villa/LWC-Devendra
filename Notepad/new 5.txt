/**
* @description : This class is used to parse the Response coming from AWS server
**/
public with sharing class CsvParserAws {
Integer csvIndex = 0;
Integer csvLineCounter = 0;
Integer csvSize;
String csvString;
static final Integer END_LINE = '\r'.codePointAt(0);
static final Integer END_CELL = ','.codePointAt(0);
static final Integer ESCAPE_CHAR = '"'.codePointAt(0);
static final Integer SPACE = ' '.codePointAt(0);
/**
* @description: This method takes the string and parse it
**/
public List<Map<String, String>> parseCsv(String csv) {
// Normalize newlines, trim last newline, if any
csvString = csv.replace('\r\n','\r').replace('\n','\r').removeEnd('\r');



// Variables
List<Map<String, String>> results = new List<Map<String, String>>();
Map<String, String> valueMap;
String[] headers;
String[] values;

// Intialization
csvSize = csvString.length();
headers = readLine();



// Duplicate headers?
if(new Set<String>(headers).size() != headers.size()) {
throw new InvalidStateException('Duplicate headers detected');
}



Integer headersSize = headers.size();



// Parse loop
while(csvIndex < csvSize) {
values = readLine();
results.add(valueMap = new Map<String, String>());
// unexpected number of columns
if(values.size() != headers.size()) {
throw new InvalidStateException('csv cells do not match header cells, expected '+headers.size()+', got '+values.size());
}
// map columns to keys
for(Integer index = 0; index < headersSize; index++) {
valueMap.put(headers[index], values[index]);
}
}
return results;
}
public String[] readLine() {
String[] buffer = new String[0];
Integer currentCharCode;
while(csvIndex < csvSize && (currentCharCode = csvString.codePointAt(csvIndex)) != END_LINE) {
if(buffer.size() > 0) {
// Not the first cell in the row, should have a END_CELL separator here. I advise against disabling this check.
if(currentCharCode != END_CELL) {
throw new InvalidStateException('expected a "'+END_CELL+'" on row '+csvLineCounter+', position '+ csvIndex +' but received "'+String.fromCharArray(new Integer[] { currentCharCode })+'"');
}
csvIndex++;
// Some CSVs include an extra space. We'll ignore these.
if(csvString.codePointAt(csvIndex) == SPACE) {
csvIndex++;
}
}
// We handle quoted and unquoted values separately to avoid cognitive complexity in reading the cells
buffer.add(String.fromCharArray(readUnquotedCell()));
//buffer.add(String.fromCharArray(csvString.codePointAt(csvIndex) == ESCAPE_CHAR? readQuotedCell(): readUnquotedCell()));
}
csvLineCounter++;
csvIndex++;
return buffer;
}




public Integer[] readUnquotedCell() {
Integer[] buffer = new Integer[0];
while(csvIndex < csvSize) {
Integer currentCharCode = csvString.codePointAt(csvIndex);
// Some CSVs might do this. Disable this if there are unquoted cells that contain ESCAPE_CHAR. Note that the first character cannot be a ESCAPE_CHAR anyways.
if(currentCharCode == ESCAPE_CHAR) {
throw new InvalidStateException('doublequote not allowed in unquoted cell at normalized index '+csvIndex);
}
if(currentCharCode == END_LINE || currentCharCode == END_CELL) {
break;
}
csvIndex++;
buffer.add(currentCharCode);
}
return buffer;
}
/*
public Integer[] readQuotedCell() {
Integer[] buffer = new Integer[0];
Boolean quoteEscape = false;
// Skips the first escape_char, it is not included in the field's value
csvIndex++;
while(csvIndex < csvSize) {
Integer currentCharCode = csvString.codePointAt(csvIndex);
// Expect the next pass to be a quoted character
if(!quoteEscape && currentCharCode == ESCAPE_CHAR) {
quoteEscape = true;
csvIndex++;
continue;
}
// A doublequote should be followed by one of three characters. However, some CSVs might break this rule. Disable this if you want.
if(quoteEscape && currentCharCode != ESCAPE_CHAR && currentCharCode != END_LINE && currentCharCode != END_CELL) {
throw new InvalidStateException('ESCAPE_CHAR must be followed by ESCAPE_CHAR, END_CELL, or END_LINE at normalized index: '+csvIndex+' got: "'+String.fromCharArray(new Integer[] { currentCharCode })+'"');
}
// End of cell only when a END_LINE or END_CELL is found when in escaped mode
if(quoteEscape && (currentCharCode == END_LINE || currentCharCode == END_CELL)) {
break;
}
quoteEscape = false;
csvIndex++;
buffer.add(currentCharCode);
}
return buffer;
}
*/



public class InvalidStateException extends Exception { }
}